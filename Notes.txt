Javascript 
#javascript is synchronous single threaded language

#Everything in Javascript happens inside an Execution context

#Execution Context is created first while running javascript code

#EC has Memory and Code component

#first of all memory gets allocated to variables and functions
*variables are intiated with undefined 
*for function whole function code gets allocated

#In code component line by line code is executed 
 where variables get assigned their values
 and function gets their own execution Context

#all this is done using Call stack
 in which first global execution context is created and then
 functions get their own execution context

#Call stack maintains order of execution of execution contexts

#Hoisting
 varables and functions can be accessed or invoked before defining
 them as variables and functions get memory allocated so 
 we can acces them before defining

*in case varaibles you will get undefined 
*in case of normal functions you will get the function 
*but in case of function assigned to variable or arrow function 
 you will get undefined  

#after execution of code, execution context will be removed from call stack

# If we do not write anything (not single line of code) also javascript engine
creates a global execution context you can debug and check

# window object gets created in global execution Context
 which contains all variable outside functions
 window object can be reffered by this keyword
 
#undefined is space holder 

# javascript is loosely typed language taht means we can assign 
 any value like string, int, boolean to same variable 

# lexical means hierrarchical

#child fuction has access to it's local scope + lexical scope of parent

# in case of global, lexical scope is null

# temporal deadzone : let and const varaibles are in seperate memory space
 than global and can not be accessed before intialization they are hoisted
 like var but are present in temporal deadzone till intiallization

# same let varibles can not be redeclared again like var

# const variables must be intialized at time of declaration and value cannot be
  changed afterwards

# Block Scope : let and const are block scope while var is not block scoped

# shadowing : same name varible declaration in other scope

# shadowing in let and const doesn't change original variable value in block scope 
  while in case of var value of original gets changed as var is not block scoped 

# let and const are block scoped
# var is global and function scoped

#closure is local scope bundeled with lexical environment

# if we return inner function and we can have variables of outer 
  function after its execution context is completed as we have lexical environment 
  of outer function in inner function

# functions are first class citizens in javascript as they can be treated as 
  values and can be passed to other functions as argument and can be returned from
  functions

cons of closure : 1. Memory wastage / leak can happen if lot of memory is generated
                     and not managed propperly
                  2. Browser may freeze to many functions present one inside other 
                  3. to many eventlistener will consume more memory  

#Callback functions : functions that are passed as argument to other functions

#we can achieve asynchronous programming using callback functions

# setTimeout stores the callback function in memoery and after the timer ends
 it loads execution context of callback function in call stack 

# callback functions are also used in event listner function, after event happens 
  function get executed

# asynchrous 
 Javascript is run in javascript run time environment by javascript engine

 javascript engine has Web API provided by browser 
 these web API can be accessed from global object(window)
 setTimeout 
 eventListner
 console 
 dom 
 local storage
 fetch

# event loops : it loads execution context of callback functions 
                in callback or micro queue

priority : microtask >> callback queue

fetch api function callbacks are queued in microtask queue

# js engines
 chrome : v8
 edge : chakra
 mozilla : spiderMonkey

parsing >> compilation >> execution 

code is parsed to Abstract Syntax Tree (AST) 
it is compiled just in time and converted to machine code for execution 

setTimeout method will excecute callback function after timer is done but 
if GEC takes more time than timer then callback function will be queued in callback queue
and it will get executed only after the global execution context is done if GEC takes 
more time then call back function will wait and after GEC it will be executed 

#Higher order functions : functions having other functions as arguments or return 
                        functions aka HOF

DRY : Don't Repeat Yourself 

#Promises
promise is object representation of eventual completion or failure of
asynchronous operation 

before promises, callback functions were used mostly for asynchronous operation
inversion of control : control of callback function is in hands of function in 
which it is passed as argument, if it calls the callback function or not we donot
have guarrante or calls more than once 

promise has state and Result
3 states pending, fullfilled, rejected
result will contain response 

## promise object is immutable
 call callback function is called once promise is fullfilled by attatching it 
 to then 
return new Promise(resolve,reject){
   resolve()
   reject()
}
# Promise Chaining
always return while Chaining 

catch can be attatched to handle errors

# async await


React Day 1

injecting HTML elements from javascript 

const <elementName> =document.createElement()
element.innerHTML="<content>"
const root = document.getElementById("<element Id from Html>")
root.appendChild(elementName)

injecting HTML elements through React

const <elementName> = React.createElement("<elementName>",{props},[children,..]);
const <root> = ReactDOM.createRoot(document.getElementById("<element Id from Html>"))
root.render(<elementName>)

Day 2
npm : package manager
package.json is configuration for npm
bundler bundels app so that it can be shipped to production
ex. parcel, vite, web-pack
2 types of packages / dependencies
dev and normal
"version" : "^2.10.2"  "version" : "~2.10.2"
caret(^) and tilde(~)
^ updates minor version automatically
~ updates major version automatically
it is safe to update minor versions as major version might break your code

package-lock.json : keeps track of exact version of dependencies

node modules : contains actual dependencies 

npx : execute package

HMR : hot module replacement

parcel does caching, code splitting, image optimaization, compressing, bundling, minification,etc 

npx parcel build index.html 
// we are provinding entry point as index.html so remove main:app.js from package.json 
otherwise it will throw error 

we can provide supported browser versions for react app by 
adding below to package.json
"browserlist":[ 
  "last 2 versions"
]

Day 3 
React elements are javascript objects 
root render replaces the code in root div id with new html code generated 

Babel : transpiler 

function which is returning JSX is functional component

to run javascript code in JSX include it in {}

COMPONENT INSIDE COMPONENT AKA component composition

when you have to pass data dynamically to component then pass it as prop 

conflict driven ui / data driven ui 

named / default export 

export const name = value ;

import {name} from "path";

export default name; 

useState is javascript function : it maintains state of the variable in component 

whenever state variable changes react rerenders component 

frameworks and libraries like react, angular are trying to keep data layer
and UI layer in sync 

React makes fast and efficient DOM manipulation, Reconcelation algorithm(React fiber),
React has virtual DOM, it compares previous DOM and virtual DOM and updates DOM with
the changes only

useEffect(()=>{},[]) 
callback function is called first when component has redered once then it will be 
called and component rendered again,and after when there is change in dependency array 

optional chaining 

custom hooks 

lazy, suspense

controlled / uncontrolled components

lifting the state up

Prop drilling

useContext

Redux tool kit 
Store : Global central object contains slice (logical partition)

dispatch action : like onclick calls reducer function 

reducer : contains logic to change data 

Selector : reads data from slice to UI aka subscribing 



 







